switch(map,
"ncbi"={
tiles="http://lifemap-ncbi.univ-lyon1.fr/osm_tiles/{z}/{x}/{y}.png"
lifemap<-addTiles(lifemap, tiles, group = "ncbi version")
},
"virus"={
tiles="http://virusmap.univ-lyon1.fr/osm_tiles/{z}/{x}/{y}.png"
lifemap<-addTiles(lifemap, tiles, group = "virus version")
},
"standard"={
tiles="http://lifemap.univ-lyon1.fr/osm_tiles/{z}/{x}/{y}.png"
lifemap<-addTiles(lifemap, tiles, group = "standard version")
},
"french"={
tiles="http://lifemap-fr.univ-lyon1.fr/osm_tiles/{z}/{x}/{y}.png"
lifemap<-addTiles(lifemap, tiles, group = "french version")
}
)
return(lifemap)
}
#' @param taxids a vector of taxids
#' @param map a character string for a lifemap, "standard" by default
#'
#' @return coordinates
#'
#' @import jsonlite
#'
#' @export
#'
#' @examples solr_request(c(2,9443,2087), map='ncbi')
solr_request<-function(taxids, map='standard') {
taxids<-as.character(taxids)
coordinates<-NULL
i<-1
while(i<=length(taxids)) {
cat(".")
taxids_sub<-taxids[i:(i+99)]
taxids_sub<-taxids_sub[!is.na(taxids_sub)]
taxids_sub<-paste(taxids_sub, collapse="%20")
switch(map,
"ncbi"={
url<-paste("http://lifemap-ncbi.univ-lyon1.fr/solr/taxo/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="")
},
"standard"={
url<-paste("http://lifemap.univ-lyon1.fr/solr/taxo/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="")
},
"virus"={
url<-paste("http://virusmap.univ-lyon1.fr/solr/taxo/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="")
},
"french"={
url<-paste("http://lifemap-fr.univ-lyon1.fr/solr/taxo/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="")
}
)
data_sub<-fromJSON(url)
map_and_data(data_sub,taxids, i)
coordinates<-rbind(coordinates,data_sub$response$docs[,c("taxid","lon","lat", "sci_name","zoom","nbdesc")])
i<-i+100
}
for (j in 1:ncol(coordinates)) coordinates[,j]<-unlist(coordinates[,j])
class(coordinates$taxid)<-"character"
return(coordinates)
}
#' @param cluster if user wants cluster ; "none" by default
#'
#' @return mark_lifemap
#'
#' @import leaflet
#'
#' @export
#'
#' @examples add_markers(marks, newmap(solr_request(2, "ncbi"), "ncbi"))
#'
add_markers <- function(marks=NULL, lifemap, radius=10, popup="none",form="none",cluster="none"){
switch(popup, #choice of popup
"dataframe"={ #if user want to use their own dataframe
for (i in marks){
elm<-as.vector(t(i))
if (is.character(elm)){ #column of characters will be used as popups
popup=elm
}
}
},
"sci_info"={ #if the user want data from database
popup=~paste(sep="<br/>",sci_name,taxid,nbdesc) #scientific name, tax id and number of descriptions are used as popup
},
#new popups can be added here, as a new switch case
"none"={ #if none chosen, then no popup
popup=NULL
}
)
switch(cluster, #choice of cluster
"sum"={ #if sum of groups choosen
clusterOptions=markerClusterOptions() #cluster wil display the number of groups clustered
},
"none"={ #if none chosen, then no cluster
clusterOptions=NULL
}
)
switch(form, #choice of icon form
"dataframe"={ #if user want to use their own dataframe
for (i in marks){
elm<-as.vector(t(i))
if (is.numeric(elm)){ #numerics column are used as radius
radius<-elm
}
}
#creation of circle for each group, with previous options
mark_lifemap<-addCircleMarkers(lifemap, lng=~lon, lat=~lat, radius=radius, color='red', stroke=TRUE, fillOpacity=0.5, popup=popup, label=~sci_name,clusterOptions=clusterOptions)
},
"nbdesc"={ #if user want to use number of descriptions as radius
mark_lifemap<-addCircleMarkers(lifemap, lng=~lon, lat=~lat, radius=(~nbdesc+1), color="blue", stroke=TRUE, popup=popup, label=~sci_name,clusterOptions=clusterOptions)
},
#new markers form can be added here, as a new switch case
"none"={ #if none chosen, simple arrow are used
mark_lifemap<-addMarkers(lifemap, lng=~lon, lat=~lat, popup=popup,label=~sci_name,clusterOptions=clusterOptions)
}
)
return(mark_lifemap)
}
#' @param taxids a vector of taxids
#'
#' @return DATA a vector of taxids
#'
#' @import jsonlite
#'
#' @export
#'
#' @examples getAscend(2)
#'
getAscend<-function(taxids) {
taxids<-as.character(taxids)
DATA<-NULL
i<-1
while(i<=length(taxids)) { #for each taxid in vector by group of 100
cat(".")
taxids_sub<-taxids[i:(i+99)]
taxids_sub<-taxids_sub[!is.na(taxids_sub)] #remove NA values
taxids_sub<-paste(taxids_sub, collapse="%20")
url<-paste("http://lifemap-ncbi.univ-lyon1.fr/solr/addi/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="") #get all taxids of ascendant groups in database
data_sub<-fromJSON(url)
if (data_sub$response$numFound!=0) { #if query succeeded
for (j in data_sub$response$docs[,"ascend"]) { #ascend is the taxid of ascendant groups
DATA<-append(DATA,j) #add each taxid to the list of results
}
}
i<-i+100
}
return(DATA)
}
#' @param taxids a vector of taxids
#'
#' @return DATA a vector of taxids
#'
#' @import jsonlite
#'
#' @export
#'
#' @examples getDescend(2)
#'
getDescend<-function(taxids) {
taxids<-as.character(taxids)
DATA<-NULL
i<-1
while(i<=length(taxids)) { #for each taxid in vector by group of 100
cat(".")
taxids_sub<-taxids[i:(i+99)]
taxids_sub<-taxids_sub[!is.na(taxids_sub)] #remove NA values
taxids_sub<-paste(taxids_sub, collapse="%20")
url<-paste("http://lifemap-ncbi.univ-lyon1.fr/solr/addi/select?q=ascend:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="") #get all taxids of descendant groups in database
data_sub<-fromJSON(url)
if (data_sub$response$numFound!=0) { #if query succeeded
for (j in data_sub$response$docs[,"taxid"]){
DATA<-append(DATA,j) #add each taxid to the list of results
}
}
i<-i+100
}
return(DATA)
}
#' @param data_sub a dataframe resultaing from a JSON query
#' @param taxids a vector of numeric correspondong to taxids
#' @param i a numeric tracking the position of the taxids
#'
#' @return TRUE
#'
#' @export
#'
#'@examples map_and_data(fromJSON("http://lifemap-ncbi.univ-lyon1.fr/solr/taxo/select?q=taxid:(2%209443%202087)&wt=json&rows=1000"), c(2,9443,2087), 1)
#'
map_and_data <- function(data_sub, taxids, i){
if (length(taxids) - i >= 100){
# if the list of taxid is longer than 100 and there are more than 100 taxids left
if (data_sub[["response"]][["numFound"]] != 100){
# if there are invalid taxids in the url, print them
print("couldn't find following taxids:")
for (k in i:(i+99)){
if ((taxids[k] %in% data_sub[["response"]][["docs"]][1][["taxid"]]) == FALSE)
print(taxids[k])
}
}
else{
# if all taxids of the url were found
print("found all")
}
}
else if (i > 100){
# if the list of taxid is longer than 100 and there are less than 100 taxids left
if (data_sub[["response"]][["numFound"]] != (length(taxids) - i)){
print("couldn't find following taxids:")
for (m in i:(length(taxids))){
if ((taxids[m] %in% data_sub[["response"]][["docs"]][1][["taxid"]]) == FALSE)
print(taxids[m])
}
}
else
print("found all")
}
else{
# if the list of taxid is shorter than 100
if (data_sub[["response"]][["numFound"]] != length(taxids)){
print("couldn't find following taxids:")
for (k in (1:(length(taxids)))){
if ((taxids[k] %in% data_sub[["response"]][["docs"]][1][["taxid"]]) == FALSE)
print(taxids[k])
}
}
else
print("found all")
}
return(TRUE)
}
#' @param popup a character string to choose the type of popup
#' @param form a character string to choose the form of markers
#' @param cluster a character sting to choose the type of cluster
#'
#' @return mark_lifemap
#'
#' @export
#'
#' @examples marklifemap(data.frame(list(c(2,9443,2087),c('A','B','C'),c(300,20,109))), 'ncbi')
#'
marklifemap<-function(data, map='standard', ascendant=FALSE, descendant=FALSE, popup="none",form="none",cluster="none"){
n<-length(data)
taxids<-as.vector(t(data[1])) # first vector is taxids, converted in vector
marks<-data[,2:n] # others are marks, in data.frame
if (descendant) {
DATA<-getDescend(taxids)
taxids<-append(taxids,DATA) #add taxids of descendant groups if option is selected
}
if (ascendant) {
DATA<-getAscend(taxids)
taxids<-append(taxids,DATA)
}
coordinates<-solr_request(taxids, map)
lifemap<-newmap(coordinates, map) # create lifemap
mark_lifemap<-add_markers(marks, lifemap,popup=popup,form=form,cluster=cluster) # marks lifemap
mark_lifemap<-add_minimap(mark_lifemap, map)
return(mark_lifemap)
}
add_minimap(newmap())
library(leaflet)
library(jsonlite)
add_minimap(newmap())
marklifemap(data.frame(list(c(2,9443,2087),c('A','B','C'),c(300,20,109))), 'ncbi')
data=data.frame(list(c(2,9443,2087),c('A','B','C'),c(300,20,109)))
data
marklifemap(data,ma="ncbi",ascendant=TRUE)
marklifemap(data,ma="ncbi",descendant=TRUE)
marklifemap(data,map="ncbi",popup='dataframe')
marklifemap(data,map="ncbi",form='nbdesc')
marklifemap(data,map="ncbi",form='dataframe')
#' @param cluster if user wants cluster ; "none" by default
#'
#' @return mark_lifemap
#'
#' @import leaflet
#'
#' @export
#'
#' @examples add_markers(marks, newmap(solr_request(2, "ncbi"), "ncbi"))
#'
add_markers <- function(marks=NULL, lifemap, radius=10, popup="none",form="none",cluster="none"){
switch(popup, #choice of popup
"dataframe"={ #if user want to use their own dataframe
for (i in marks){
elm<-as.vector(t(i))
if (is.character(elm)){ #column of characters will be used as popups
popup=elm
}
}
},
"sci_info"={ #if the user want data from database
popup=~paste(sep="<br/>",sci_name,taxid,nbdesc) #scientific name, tax id and number of descriptions are used as popup
},
#new popups can be added here, as a new switch case
"none"={ #if none chosen, then no popup
popup=NULL
}
)
switch(cluster, #choice of cluster
"sum"={ #if sum of groups choosen
clusterOptions=markerClusterOptions() #cluster wil display the number of groups clustered
},
"none"={ #if none chosen, then no cluster
clusterOptions=NULL
}
)
switch(form, #choice of icon form
"dataframe"={ #if user want to use their own dataframe
for (i in marks){
elm<-as.vector(t(i))
if (is.numeric(elm)){ #numerics column are used as radius
radius<-elm/10
}
}
#creation of circle for each group, with previous options
mark_lifemap<-addCircleMarkers(lifemap, lng=~lon, lat=~lat, radius=radius, color='red', stroke=TRUE, fillOpacity=0.5, popup=popup, label=~sci_name,clusterOptions=clusterOptions)
},
"nbdesc"={ #if user want to use number of descriptions as radius
mark_lifemap<-addCircleMarkers(lifemap, lng=~lon, lat=~lat, radius=(~nbdesc+1), color="blue", stroke=TRUE, popup=popup, label=~sci_name,clusterOptions=clusterOptions)
},
#new markers form can be added here, as a new switch case
"none"={ #if none chosen, simple arrow are used
mark_lifemap<-addMarkers(lifemap, lng=~lon, lat=~lat, popup=popup,label=~sci_name,clusterOptions=clusterOptions)
}
)
return(mark_lifemap)
}
marklifemap(data,map="ncbi",form='dataframe')
data
marklifemap(data,map="ncbi",cluster='sum')
#' @param taxids a vector of taxids
#'
#' @return DATA a vector of taxids
#'
#' @import jsonlite
#'
#' @export
#'
#' @examples get_descend(2)
#'
get_descend<-function(taxids) {
taxids<-as.character(taxids)
DATA<-NULL
i<-1
while(i<=length(taxids)) { #for each taxid in vector by group of 100
cat(".")
taxids_sub<-taxids[i:(i+99)]
taxids_sub<-taxids_sub[!is.na(taxids_sub)] #remove NA values
taxids_sub<-paste(taxids_sub, collapse="%20")
url<-paste("http://lifemap-ncbi.univ-lyon1.fr/solr/addi/select?q=ascend:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="") #get all taxids of descendant groups in database
data_sub<-fromJSON(url)
if (data_sub$response$numFound!=0) { #if query succeeded
for (j in data_sub$response$docs[,"taxid"]){
DATA<-append(DATA,j) #add each taxid to the list of results
}
}
i<-i+100
}
return(DATA)
}
#' @param taxids a vector of taxids
#'
#' @return DATA a vector of taxids
#'
#' @import jsonlite
#'
#' @export
#'
#' @examples get_ascend(2)
#'
get_ascend<-function(taxids) {
taxids<-as.character(taxids)
DATA<-NULL
i<-1
while(i<=length(taxids)) { #for each taxid in vector by group of 100
cat(".")
taxids_sub<-taxids[i:(i+99)]
taxids_sub<-taxids_sub[!is.na(taxids_sub)] #remove NA values
taxids_sub<-paste(taxids_sub, collapse="%20")
url<-paste("http://lifemap-ncbi.univ-lyon1.fr/solr/addi/select?q=taxid:(",taxids_sub,")&wt=json&rows=1000",sep="", collapse="") #get all taxids of ascendant groups in database
data_sub<-fromJSON(url)
if (data_sub$response$numFound!=0) { #if query succeeded
for (j in data_sub$response$docs[,"ascend"]) { #ascend is the taxid of ascendant groups
DATA<-append(DATA,j) #add each taxid to the list of results
}
}
i<-i+100
}
return(DATA)
}
#' @param popup a character string to choose the type of popup among 'dataframe', 'sci_info' and 'none'; 'none' by default
#' @param form a character string to choose the form of markers among 'dataframe', 'nbdesc' and 'none'; 'none' by default
#' @param cluster a character sting to choose the type of cluster among 'sum' and 'none'; 'none' by default
#'
#' @return mark_lifemap
#'
#' @export
#'
#' @examples marklifemap(data.frame(list(c(2,9443,2087),c('A','B','C'),c(300,20,109))), 'ncbi')
#'
marklifemap<-function(data, map='standard', ascendant=FALSE, descendant=FALSE, popup="none", form="none", cluster="none"){
n<-length(data)
taxids<-as.vector(t(data[1])) # first vector is taxids, converted in vector
marks<-data[,2:n] # others are marks, in data.frame
if (descendant) {
DATA<-get_descend(taxids)
taxids<-append(taxids,DATA) #add taxids of descendant groups if option is selected
}
if (ascendant) {
DATA<-get_ascend(taxids)
taxids<-append(taxids,DATA)
}
coordinates<-solr_request(taxids, map)
lifemap<-newmap(coordinates, map) # create lifemap
mark_lifemap<-add_markers(marks, lifemap,popup=popup,form=form,cluster=cluster) # marks lifemap
mark_lifemap<-add_minimap(mark_lifemap, map)
return(mark_lifemap)
}
marklifemap(data,map="ncbi",cluster='sum')
marklifemap(data,map='virus')
marklifemap(data)
#' @examples marklifemap(data.frame(list(c(2,9443,2087),c('A','B','C'),c(300,20,109))), 'ncbi')
#' @param cluster if user wants cluster ; "none" by default
#'
#' @return mark_lifemap
#'
#' @import leaflet
#'
#' @export
#'
#' @examples add_markers(marks, newmap(solr_request(2, "ncbi"), "ncbi"))
#'
add_markers <- function(marks=NULL, lifemap, radius=10, popup="none",form="none",cluster="none"){
switch(popup, #choice of popup
"dataframe"={ #if user want to use their own dataframe
for (i in marks){
elm<-as.vector(t(i))
if (is.character(elm)){ #column of characters will be used as popups
popup=elm
}
}
},
"sci_info"={ #if the user want data from database
popup=~paste(sep="<br/>",sci_name,taxid,nbdesc) #scientific name, tax id and number of descriptions are used as popup
},
#new popups can be added here, as a new switch case
"none"={ #if none chosen, then no popup
popup=NULL
}
)
switch(cluster, #choice of cluster
"sum"={ #if sum of groups choosen
clusterOptions=markerClusterOptions() #cluster wil display the number of groups clustered
},
"none"={ #if none chosen, then no cluster
clusterOptions=NULL
}
)
switch(form, #choice of icon form
"dataframe"={ #if user want to use their own dataframe
for (i in marks){
elm<-as.vector(t(i))
if (is.numeric(elm)){ #numerics column are used as radius
radius<-elm/10
}
}
#creation of circle for each group, with previous options
mark_lifemap<-addCircleMarkers(lifemap, lng=~lon, lat=~lat, radius=radius, color='red', stroke=TRUE, fillOpacity=0.5, popup=popup, label=~sci_name,clusterOptions=clusterOptions)
},
"nbdesc"={ #if user want to use number of descriptions as radius
mark_lifemap<-addCircleMarkers(lifemap, lng=~lon, lat=~lat, radius=(~nbdesc+1), color="blue", stroke=TRUE, popup=popup, label=~sci_name,clusterOptions=clusterOptions)
},
#new markers form can be added here, as a new switch case
"none"={ #if none chosen, simple arrow are used
mark_lifemap<-addMarkers(lifemap, lng=~lon, lat=~lat, popup=popup,label=~sci_name,clusterOptions=clusterOptions)
}
)
return(mark_lifemap)
}
#' @param popup a character string to choose the type of popup among 'dataframe', 'sci_info' and 'none'; 'none' by default
#' @param form a character string to choose the form of markers among 'dataframe', 'nbdesc' and 'none'; 'none' by default
#' @param cluster a character sting to choose the type of cluster among 'sum' and 'none'; 'none' by default
#'
#' @return mark_lifemap
#'
#' @export
#'
#' @examples marklifemap(data.frame(list(c(2,9443,2087),c('A','B','C'),c(300,20,109))), 'ncbi')
#'
marklifemap<-function(data, map='standard', minimap=FALSE, ascendant=FALSE, descendant=FALSE, popup="none", form="none", cluster="none"){
n<-length(data)
taxids<-as.vector(t(data[1])) # first vector is taxids, converted in vector
marks<-data[,2:n] # others are marks, in data.frame
if (descendant) {
DATA<-get_descend(taxids)
taxids<-append(taxids,DATA) #add taxids of descendant groups if option is selected
}
if (ascendant) {
DATA<-get_ascend(taxids)
taxids<-append(taxids,DATA)
}
coordinates<-solr_request(taxids, map)
lifemap<-newmap(coordinates, map) # create lifemap
mark_lifemap<-add_markers(marks, lifemap,popup=popup,form=form,cluster=cluster) # marks lifemap
if (minimap) {
mark_lifemap<-add_minimap(mark_lifemap, map)
}
return(mark_lifemap)
}
marklifemap(data)
marklifemap(data, minimap=TRUE)
